#!/bin/bash

# This file creates and fills the experiment's directory on scratch. 
# It then creates the job's sbatch file and adds the job to roll_q (unless it's a mock job)

# Allow user to prepare mock jobs with -m
IS_MOCK=0
IS_VERBOSE=0
while getopts "mv" OPT; do
  case $OPT in
    m)
      IS_MOCK=1
      ;;
    v)
      IS_VERBOSE=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      return 1
      ;;
  esac
done

# Warn that we're in verbose mode
if [ ! ${IS_VERBOSE} -eq 0 ]
then
  echo "[VERBOSE] Verbose flag (-v) detected. Printing additional debug information."
fi

# Grab global variables and helper functions
# Root directory -> The root level of the repo, should be directory just above 'experiments'
REPO_ROOT_DIR=$(pwd | grep -oP ".+(?=/experiments/)")
if [ ! ${IS_VERBOSE} -eq 0 ]
then
  echo "[VERBOSE] Found repo root dir: ${REPO_ROOT_DIR}"
  echo "[VERBOSE] Loading global config and helper functions..."
fi
. ${REPO_ROOT_DIR}/config_global.sh
. ${REPO_ROOT_DIR}/global_shared_files/helper_functions.sh

# Extract info about this experiment
EXP_NAME=$( get_cur_exp_name )
EXP_REL_PATH=$( get_cur_relative_exp_path )
EXP_ROOT_DIR=${REPO_ROOT_DIR}/${EXP_REL_PATH}
if [ ! ${IS_VERBOSE} -eq 0 ]
then
  echo "[VERBOSE] Experiment name: ${EXP_NAME}"
  echo "[VERBOSE] Experiment path (relative): ${EXP_REL_PATH}"
  echo "[VERBOSE] Experiment root dir (not relative): ${EXP_ROOT_DIR}"
  echo ""
fi

# Switch to mock scratch, if requested
if [ ! ${IS_MOCK} -eq 0 ]
then
  SCRATCH_ROOT_DIR=${EXP_ROOT_DIR}/mock_scratch
  mkdir -p ${SCRATCH_ROOT_DIR}
  echo "Preparing *mock* jobs for experiment: ${EXP_NAME}"
else
  echo "Preparing jobs for experiment: ${EXP_NAME}"
fi

# Grab references to the various directories used in setup
MABE_DIR=${REPO_ROOT_DIR}/MABE2
#MABE_EXTRAS_DIR=${REPO_ROOT_DIR}/MABE2_extras
GLOBAL_FILE_DIR=${REPO_ROOT_DIR}/global_shared_files
SCRATCH_EXP_DIR=${SCRATCH_ROOT_DIR}/${EXP_REL_PATH}
SCRATCH_FILE_DIR=${SCRATCH_EXP_DIR}/shared_files
SCRATCH_SLURM_DIR=${SCRATCH_EXP_DIR}/slurm
SCRATCH_SLURM_OUT_DIR=${SCRATCH_SLURM_DIR}/out
SCRATCH_SLURM_JOB_DIR=${SCRATCH_SLURM_DIR}/jobs
if [ ! ${IS_VERBOSE} -eq 0 ]
then
  echo ""
  echo "[VERBOSE] MABE dir: ${MABE_DIR}"
  echo "[VERBOSE] Global shared file dir: ${GLOBAL_FILE_DIR}"
  echo "[VERBOSE] Scratch directories:"
  echo "[VERBOSE]     Main exp dir: ${SCRATCH_EXP_DIR}"
  echo "[VERBOSE]     Shared files dir: ${SCRATCH_FILE_DIR}"
  echo "[VERBOSE]     Slurm out dir: ${SCRATCH_SLURM_OUT_DIR}"
  echo "[VERBOSE]     Slurm job dir: ${SCRATCH_SLURM_JOB_DIR}"
fi

# Setup the directory structure
echo " "
echo "Creating directory structure in: ${SCRATCH_EXP_DIR}"
mkdir -p ${SCRATCH_FILE_DIR}
mkdir -p ${SCRATCH_SLURM_DIR}
mkdir -p ${SCRATCH_SLURM_OUT_DIR}
mkdir -p ${SCRATCH_SLURM_JOB_DIR}
mkdir -p ${SCRATCH_EXP_DIR}/reps

# Initialize roll_q if needed
if [ ! -d ${ROLL_Q_DIR} ] && [ ${IS_MOCK} -eq 0 ]
then
    echo "roll_q not found on scratch! Copying and initializing..."
    cp ${BASE_ROLL_Q_DIR} ${ROLL_Q_DIR} -r
    echo "0" > ${ROLL_Q_DIR}/roll_q_idx.txt
    rm ${ROLL_Q_DIR}/roll_q_job_array.txt
    touch ${ROLL_Q_DIR}/roll_q_job_array.txt
    echo "roll_q initialized!"
    echo "[VERBOSE] roll_q dir: ${ROLL_Q_DIR}"
fi

# Copy all files that are shared across replicates
echo "Copying files to scratch"
cp ${MABE_DIR}/build/MABE ${SCRATCH_FILE_DIR}
cp ${GLOBAL_FILE_DIR}/* ${SCRATCH_FILE_DIR}
cp ${EXP_ROOT_DIR}/shared_files/* ${SCRATCH_FILE_DIR}
if [ ! ${IS_VERBOSE} -eq 0 ]
then
  echo ""
  echo "[VERBOSE] Copying from:" 
  echo "[VERBOSE]     1. ${MABE_DIR}/build"
  echo "[VERBOSE]     1. ${GLOBAL_FILE_DIR}"
  echo "[VERBOSE]     1. ${EXP_ROOT_DIR}/shared_files"
fi

# Tell user where files are going
echo " "
echo "Sending generated slurm job file to dir: ${SCRATCH_SLURM_JOB_DIR}"
echo "Sending slurm output files to dir: ${SCRATCH_SLURM_OUT_DIR}"
echo " "

# Create output sbatch file, and find/replace key info
sed -e "s/(<EXP_NAME>)/${EXP_NAME}/g" 00_job_template_evolution.sb > out.sb
ESCAPED_SCRATCH_SLURM_OUT_DIR=$( escape_slashes ${SCRATCH_SLURM_OUT_DIR} )
sed -i -e "s/(<SCRATCH_SLURM_OUT_DIR>)/${ESCAPED_SCRATCH_SLURM_OUT_DIR}/g" out.sb
ESCAPED_SCRATCH_EXP_DIR=$( escape_slashes ${SCRATCH_EXP_DIR} )
sed -i -e "s/(<SCRATCH_EXP_DIR>)/${ESCAPED_SCRATCH_EXP_DIR}/g" out.sb
ESCAPED_SCRATCH_FILE_DIR=$( escape_slashes ${SCRATCH_FILE_DIR} )
sed -i -e "s/(<SCRATCH_FILE_DIR>)/${ESCAPED_SCRATCH_FILE_DIR}/g" out.sb

# Move output sbatch file to final destination, and add to roll_q queue if needed
TIMESTAMP=$( get_timestamp )
SLURM_FILENAME=${SCRATCH_SLURM_JOB_DIR}/${EXP_NAME}__${TIMESTAMP}.sb
mv out.sb ${SLURM_FILENAME} 
echo ""
if [ ${IS_MOCK} -gt 0 ]
then
  chmod u+x ${SLURM_FILENAME}
  LOCAL_BATCH_RUNNER=${SCRATCH_SLURM_JOB_DIR}/run_batch__${TIMESTAMP}.sh
  echo "#!/bin/bash" > ${LOCAL_BATCH_RUNNER}
  chmod u+x ${LOCAL_BATCH_RUNNER}
  ARRAY_LINE=$( grep ${SLURM_FILENAME} -Pe "#SBATCH --array" )
  ARRAY_RANGE=$( echo "${ARRAY_LINE}" | grep -Po "\d+-\d+$" )
  ARRAY_START=$( echo "${ARRAY_RANGE}" | grep -oP "^\d+" )
  ARRAY_STOP=$( echo "${ARRAY_RANGE}" | grep -oP "\d+$" )
  echo "for TASK_ID in \$( seq ${ARRAY_START} ${ARRAY_STOP} )" >> ${LOCAL_BATCH_RUNNER}
  echo "do" >> ${LOCAL_BATCH_RUNNER}
  echo "  echo \"\"" >> ${LOCAL_BATCH_RUNNER}
  echo "  echo \"Running task \${TASK_ID}\" locally!" >> ${LOCAL_BATCH_RUNNER}
  echo "  ( export SLURM_ARRAY_TASK_ID=\${TASK_ID} ; ${SLURM_FILENAME} -m -l )" >> ${LOCAL_BATCH_RUNNER}
  echo "done" >> ${LOCAL_BATCH_RUNNER}
  echo "Finished preparing *mock* jobs."
  echo "To run the whole batch, execute:"
  echo "  ${LOCAL_BATCH_RUNNER}"
else
  echo "${SLURM_FILENAME}" >> ${ROLL_Q_DIR}/roll_q_job_array.txt
  echo "Finished preparing jobs."
  echo "Run roll_q to queue jobs. roll_q directory:"
  echo "${ROLL_Q_DIR}"
fi
echo ""
